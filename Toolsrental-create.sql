-- For connection:
-- should be run while connected as 'sys as sysdba'
--

-- Create STORAGE
CREATE TABLESPACE cst2355
  DATAFILE 'cst2355.dat' SIZE 40M 
  ONLINE; 
  
-- Create Users
CREATE USER Toolsrental IDENTIFIED BY ToolsrentalPassword ACCOUNT UNLOCK
	DEFAULT TABLESPACE cst2355
	QUOTA 20M ON cst2355;
	
CREATE USER testUser IDENTIFIED BY testPassword ACCOUNT UNLOCK
	DEFAULT TABLESPACE cst2355
	QUOTA 5M ON cst2355;
	
-- Create ROLES
CREATE ROLE applicationAdmin;
CREATE ROLE applicationUser;

-- Grant PRIVILEGES
GRANT CONNECT, RESOURCE, CREATE VIEW, CREATE TRIGGER, CREATE PROCEDURE TO applicationAdmin;
GRANT CONNECT, RESOURCE TO applicationUser;

GRANT applicationAdmin TO Toolsrental;
GRANT applicationUser TO testUser;

-- NOW we can connect as the applicationAdmin and create the stored procedures, tables, and triggers

CONNECT Toolsrental/ToolsrentalPassword;


-- Table structure for table `CUSTOMER`

CREATE TABLE CUSTOMER( 
	CUSTOMER_ID NUMBER NOT NULL, 
	PHONE_NUMBER VARCHAR2(20) NOT NULL, 
	ADDRESS VARCHAR2(100) NOT NULL, 
	EMAIL VARCHAR2(50), 
	 PRIMARY KEY (CUSTOMER_ID)
);

CREATE TABLE TOOL ( 
    TOOL_ID NUMBER NOT NULL, 
	TYPE VARCHAR2(50) NOT NULL, 
	DESCRIPTION VARCHAR2(80), 
	PRICE NUMBER(20) NOT NULL, 
    PRIMARY KEY (TOOL_ID)
    );
	
CREATE TABLE RENTAL (
   RENTAL_ID NUMBER NOT NULL, 
	CUSTOMER_ID NUMBER NOT NULL, 
	TOOL_ID NUMBER NOT NULL, 
	ORDER_DATE DATE NOT NULL, 
	START_DATE DATE  NOT NULL, 
	END_DATE DATE NOT NULL, 
	RENT_COST NUMBER(20) NOT NULL, 
	 PRIMARY KEY (RENTAL_ID)
     );
     
     
INSERT INTO RENTAL VALUES (1,1,1,'3-Apr-23','21-Apr-23','7-May-23',12);
INSERT INTO RENTAL VALUES (2,2,2,'19-Apr-23','2-May-23','19-May-23',16);
INSERT INTO RENTAL VALUES (3,3,3,'8-May-23','28-May-23','20-Jun-23',17);
INSERT INTO RENTAL VALUES (4,4,4,'12-Jun-23','29-Jun-23','27-Jul-23',18);


CREATE TABLE HAMMER (
    TOOL_ID NUMBER NOT NULL, 
	HAMMERTYPE VARCHAR2(50) NOT NULL, 
	HEADMATERIAL VARCHAR2(50), 
	 PRIMARY KEY (TOOL_ID)
     );
     
INSERT INTO HAMMER VALUES (1,'Claw Hammer','SteeL');
INSERT INTO HAMMER VALUES (2,'Framing Hammer','Copper');
INSERT INTO HAMMER VALUES (3,'Ball Peen Hammer','Plastic');
INSERT INTO HAMMER VALUES (4,'Tack Hammer','Plastic');

COMMIT;


CREATE SEQUENCE FNAMES_SEQ START WITH 1 INCREMENT BY 1;

-- Create the table with the specified columns
CREATE TABLE FNAMES 
(
  FID NUMBER NOT NULL PRIMARY KEY,
  FIRST_NAME VARCHAR2(50)
);

CREATE SEQUENCE LNAMES_SEQ START WITH 1 INCREMENT BY 1;

-- Create the table with the specified columns
CREATE TABLE LNAMES 
(
  LID NUMBER NOT NULL PRIMARY KEY,
  LAST_NAME VARCHAR2(50)
);

CREATE SEQUENCE CUSTOMER_FNAME_SEQ START WITH 1 INCREMENT BY 1;

CREATE TABLE CUSTOMER_FNAME 
(
  IDCUSTOMER_FNAME NUMBER NOT NULL PRIMARY KEY,
  CUSTOMER_ID NUMBER REFERENCES CUSTOMER(CUSTOMER_ID),
  FID NUMBER REFERENCES FNAMES(FID),
  STARTTIME TIMESTAMP,
  ENDTIME TIMESTAMP
);


CREATE SEQUENCE CUSTOMER_LNAME_SEQ START WITH 1 INCREMENT BY 1;

CREATE TABLE CUSTOMER_LNAME 
(
  IDCUSTOMER_LNAME NUMBER NOT NULL PRIMARY KEY,
  CUSTOMER_ID NUMBER REFERENCES CUSTOMER(CUSTOMER_ID),
  LID NUMBER REFERENCES LNAMES(LID),
  STARTTIME TIMESTAMP,
  ENDTIME TIMESTAMP
);


CREATE VIEW CUSTOMER_VIEW AS 
SELECT CUSTOMER.CUSTOMER_ID, FNAMES.FIRST_NAME, LNAMES.LAST_NAME,CUSTOMER.PHONE_NUMBER,CUSTOMER.ADDRESS,CUSTOMER.EMAIL
FROM CUSTOMER
LEFT JOIN CUSTOMER_FNAME 
ON CUSTOMER.CUSTOMER_ID = CUSTOMER_FNAME.CUSTOMER_ID
LEFT JOIN FNAMES
ON CUSTOMER_FNAME.FID = FNAMES.FID 
LEFT JOIN CUSTOMER_LNAME 
ON CUSTOMER.CUSTOMER_ID = CUSTOMER_LNAME.CUSTOMER_ID
LEFT JOIN LNAMES
ON CUSTOMER_LNAME.LID = LNAMES.LID
WHERE
	(CUSTOMER_FNAME.ENDTIME is NULL)
			AND
	(CUSTOMER_LNAME.ENDTIME is NULL);
    
select * from CUSTOMER_VIEW


-- Create an INSTEAD OF INSERT trigger for CUSTOMER_VIEW
CREATE OR REPLACE TRIGGER customer_view_insert
INSTEAD OF INSERT ON CUSTOMER_VIEW
FOR EACH ROW
DECLARE
  v_fid NUMBER;
  v_lid NUMBER;

BEGIN

  -- Insert data into FNAMES table if FIRST_NAME is provided
  IF :NEW.FIRST_NAME IS NOT NULL THEN
    INSERT INTO FNAMES (FID, FIRST_NAME)
    VALUES (FNAMES_SEQ.NEXTVAL, :NEW.FIRST_NAME)
    RETURNING FID INTO v_fid;
  END IF;

  -- Insert data into LNAMES table if LAST_NAME is provided
  IF :NEW.LAST_NAME IS NOT NULL THEN
    INSERT INTO LNAMES (LID, LAST_NAME)
    VALUES (LNAMES_SEQ.NEXTVAL, :NEW.LAST_NAME)
    RETURNING LID INTO v_lid;
  END IF;

  -- Insert the data into the CUSTOMER table
  INSERT INTO CUSTOMER (CUSTOMER_ID, PHONE_NUMBER, ADDRESS, EMAIL)
  VALUES (:NEW.CUSTOMER_ID, :NEW.PHONE_NUMBER, :NEW.ADDRESS, :NEW.EMAIL);

  -- Insert data into CUSTOMER_FNAME and CUSTOMER_LNAME tables
  IF v_fid IS NOT NULL THEN
    INSERT INTO CUSTOMER_FNAME (IDCUSTOMER_FNAME,CUSTOMER_ID, FID, STARTTIME, ENDTIME)
    VALUES (CUSTOMER_FNAME_SEQ.nextval,:NEW.CUSTOMER_ID, v_fid, SYSTIMESTAMP, NULL);
  END IF;

  IF v_lid IS NOT NULL THEN
    INSERT INTO CUSTOMER_LNAME (IDCUSTOMER_LNAME,CUSTOMER_ID, LID, STARTTIME, ENDTIME)
    VALUES (CUSTOMER_FNAME_SEQ.nextval,:NEW.CUSTOMER_ID, v_lid, SYSTIMESTAMP, NULL);
  END IF;
   

END;
/

select * from CUSTOMER
select * from customer_fname
select * from FNAMES
select * from LNAMES

INSERT INTO CUSTOMER_VIEW VALUES (1,'John','Smith','(712) 345-6789','123 Main Street Toronto ON M5V2G9','john.smith123@example.com');
INSERT INTO CUSTOMER_VIEW VALUES (2,'Michael','Davis','(731) 234-5678','789 Oak Lane Montreal QC H2X4R8','michael.davis789@example.com');
INSERT INTO CUSTOMER_VIEW VALUES (3,'Emily', 'Brown','(741) 234-5678','234 Birch Road Calgary AB T2E1K6','emily.brown123@example.com');
INSERT INTO CUSTOMER_VIEW VALUES (4,'Jessica', 'Lee','(751) 234-5678','567 Pine Street Ottawa ON K1P6A9','jessica.lee456@example.com');


CREATE OR REPLACE TRIGGER customer_view_update
INSTEAD OF UPDATE ON CUSTOMER_VIEW
FOR EACH ROW
DECLARE
  v_fid NUMBER;
  v_lid NUMBER;

BEGIN

    UPDATE CUSTOMER_LNAME
    SET ENDTIME = SYSTIMESTAMP
    WHERE CUSTOMER_ID=:NEW.CUSTOMER_ID AND ENDTIME IS NULL;
   
    UPDATE CUSTOMER_FNAME
    SET ENDTIME = SYSTIMESTAMP
    WHERE CUSTOMER_ID=:NEW.CUSTOMER_ID AND ENDTIME IS NULL;
    
    IF :NEW.FIRST_NAME IS NOT NULL THEN
     INSERT INTO FNAMES (FID, FIRST_NAME)
     VALUES (FNAMES_SEQ.NEXTVAL, :NEW.FIRST_NAME)
     RETURNING FID INTO v_fid;
    END IF;

  -- Insert data into LNAMES table if LAST_NAME is provided
  IF :NEW.LAST_NAME IS NOT NULL THEN
    INSERT INTO LNAMES (LID, LAST_NAME)
    VALUES (LNAMES_SEQ.NEXTVAL, :NEW.LAST_NAME)
    RETURNING LID INTO v_lid;
  END IF;

  -- update the data into the CUSTOMER table
  UPDATE CUSTOMER SET  PHONE_NUMBER=:NEW.PHONE_NUMBER, ADDRESS=:NEW.ADDRESS, EMAIL=:NEW.EMAIL
  WHERE CUSTOMER_ID=:NEW.CUSTOMER_ID;

  -- Insert data into CUSTOMER_FNAME and CUSTOMER_LNAME tables
  IF v_fid IS NOT NULL THEN
    INSERT INTO CUSTOMER_FNAME (IDCUSTOMER_FNAME,CUSTOMER_ID, FID, STARTTIME, ENDTIME)
    VALUES (CUSTOMER_FNAME_SEQ.nextval,:NEW.CUSTOMER_ID, v_fid, SYSTIMESTAMP, NULL);
  END IF;

  IF v_lid IS NOT NULL THEN
    INSERT INTO CUSTOMER_LNAME (IDCUSTOMER_LNAME,CUSTOMER_ID, LID, STARTTIME, ENDTIME)
    VALUES (CUSTOMER_FNAME_SEQ.nextval,:NEW.CUSTOMER_ID, v_lid, SYSTIMESTAMP, NULL);
  END IF;
   

END;
/


update CUSTOMER_VIEW set 
FIRST_NAME = 'Jessica1',
LAST_NAME = 'Lee1',
PHONE_NUMBER = '(751) 234-5678',
ADDRESS='567 Pine Street Ottawa ON K1P6A9',
EMAIL='jessica.lee456@example.com' where CUSTOMER_ID='4';

select * from CUSTOMER_VIEW


CREATE OR REPLACE TRIGGER customer_view_delete
INSTEAD OF DELETE ON CUSTOMER_VIEW
FOR EACH ROW
DECLARE

BEGIN

 UPDATE CUSTOMER_LNAME
    SET ENDTIME = SYSTIMESTAMP
    WHERE CUSTOMER_ID=:NEW.CUSTOMER_ID AND ENDTIME IS NULL;
   
    UPDATE CUSTOMER_FNAME
    SET ENDTIME = SYSTIMESTAMP
    WHERE CUSTOMER_ID=:NEW.CUSTOMER_ID AND ENDTIME IS NULL;
    

END;
/


ALTER TABLE TOOL DROP COLUMN NAME;

CREATE SEQUENCE TNAME_SEQ START WITH 1 INCREMENT BY 1;

-- Create the table with the specified columns
CREATE TABLE TNAME
(
  TNID NUMBER NOT NULL PRIMARY KEY,
  TOOL_NAME VARCHAR2(50)
);

CREATE SEQUENCE TOOL_TNAME_SEQ START WITH 1 INCREMENT BY 1;

CREATE TABLE TOOL_TNAME
(
  IDTOOL_TNAME NUMBER NOT NULL PRIMARY KEY,
  TOOL_ID NUMBER REFERENCES TOOL(TOOL_ID),
  TNID NUMBER REFERENCES TNAME(TNID),
  STARTTIME TIMESTAMP,
  ENDTIME TIMESTAMP
);


CREATE VIEW TOOL_VIEW AS 
SELECT TOOL.TOOL_ID, TNAME.TOOL_NAME as NAME ,TOOL.TYPE,TOOL.DESCRIPTION,TOOL.PRICE
FROM TOOL
LEFT JOIN TOOL_TNAME 
ON TOOL.TOOL_ID = TOOL_TNAME.TOOL_ID
LEFT JOIN TNAME
ON TOOL_TNAME.TNID = TNAME.TNID 
WHERE
	(TOOL_TNAME.ENDTIME is NULL);

-- Create an INSTEAD OF INSERT trigger for TOOL_VIEW
CREATE OR REPLACE TRIGGER tool_view_insert
INSTEAD OF INSERT ON TOOL_VIEW
FOR EACH ROW
DECLARE
  v_tnid NUMBER;

BEGIN

  -- Insert data into TNAME table if TOOL_NAME is provided
  IF :NEW.TOOL_NAME IS NOT NULL THEN
    INSERT INTO TNAME (TNID, TOOL_NAME)
    VALUES (TNAME_SEQ.NEXTVAL, :NEW.TOOL_NAME)
    RETURNING TNID INTO v_tnid;
  END IF;

  -- Insert the data into the TOOL table
  INSERT INTO TOOL (TOOL_ID, TYPE, DESCRIPTION, PRICE)
  VALUES (:NEW.TOOL_ID, :NEW.TYPE, :NEW.DESCRIPTION, :NEW.PRICE);

  -- Insert data into TOOL_TNAME table
  IF v_tnid IS NOT NULL THEN
    INSERT INTO TOOL_TNAME (IDTOOL_TNAME,TOOL_ID, TNID, STARTTIME, ENDTIME)
    VALUES (TOOL_TNAME_SEQ.nextval,:NEW.TOOL_ID, v_tnid, SYSTIMESTAMP, NULL);
  END IF;


END;
/


INSERT INTO TOOL_VIEW VALUES (1,'Claw Hammer','Hammer','Claw Hammer',25);
INSERT INTO TOOL_VIEW VALUES (2,'Framing Hammer','Hammer','Framing Hammer',30);
INSERT INTO TOOL_VIEW VALUES (3,'Ball Peen Hammer','Hammer','Ball Peen Hammer',15);
INSERT INTO TOOL_VIEW VALUES (4,'Tack Hammer','Hammer','Tack Hammer',25);
INSERT INTO TOOL_VIEW VALUES (5,'Snow Shovel','Shovel','Snow Shovel',54);
INSERT INTO TOOL_VIEW VALUES (6,'Spade Shovel','Shovel','SpadeShovel',47);
INSERT INTO TOOL_VIEW VALUES (7,'Hex Screwdriver','Screwdriver','Hex Screwdriver',32);



CREATE OR REPLACE TRIGGER tool_view_update
INSTEAD OF UPDATE ON TOOL_VIEW
FOR EACH ROW
DECLARE
  v_tnid NUMBER;

BEGIN

    UPDATE TOOL_TNAME
    SET ENDTIME = SYSTIMESTAMP
    WHERE TOOL_ID=:NEW.TOOL_ID AND ENDTIME IS NULL;
   
    
  -- Insert data into TNAME table if TOOL_NAME is provided
  IF :NEW.NAME IS NOT NULL THEN
    INSERT INTO TNAME (TNID, TOOL_NAME)
    VALUES (TNAME_SEQ.NEXTVAL, :NEW.NAME)
    RETURNING TNID INTO v_tnid;
  END IF;


  -- update the data into the CUSTOMER table
  UPDATE TOOL SET  TYPE=:NEW.TYPE, DESCRIPTION=:NEW.DESCRIPTION, PRICE=:NEW.PRICE
  WHERE TOOL_ID=:NEW.TOOL_ID;

   -- Insert data into TOOL_TNAME table
  IF v_tnid IS NOT NULL THEN
    INSERT INTO TOOL_TNAME (IDTOOL_TNAME,TOOL_ID, TNID, STARTTIME, ENDTIME)
    VALUES (TOOL_TNAME_SEQ.nextval,:NEW.TOOL_ID, v_tnid, SYSTIMESTAMP, NULL);
  END IF;

   

END;
/


update TOOL_VIEW set 
NAME = 'Ball Peen Hammer update',
TYPE = 'Hammer',
DESCRIPTION = 'Ball Peen Hammer update',
PRICE=15
where TOOL_ID='3';


CREATE OR REPLACE TRIGGER tool_view_delete
INSTEAD OF DELETE ON TOOL_VIEW
FOR EACH ROW
DECLARE

BEGIN

 UPDATE TOOL_TNAME
    SET ENDTIME = SYSTIMESTAMP
    WHERE TOOL_ID=:NEW.TOOL_ID AND ENDTIME IS NULL;
   
    
    

END;
/


